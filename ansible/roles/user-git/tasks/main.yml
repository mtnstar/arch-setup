---
- name: Check if setup config file exists
  stat:
    path: "{{ setup_config_file }}"
  register: config_file

- name: Load Vaultwarden credentials if config file exists
  include_vars:
    file: "{{ setup_config_file }}"
  when: config_file.stat.exists

- name: Prompt for Vaultwarden credentials
  vars_prompt:
    - name: vaultwarden_hostname
      prompt: "Enter Vaultwarden hostname"
      default: "{{ vaultwarden_hostname | default('') }}"
      private: no
    - name: vaultwarden_user
      prompt: "Enter Vaultwarden username"
      default: "{{ vaultwarden_user | default('') }}"
      private: no
    - name: vaultwarden_password
      prompt: "Enter Vaultwarden password"
      private: yes
  when: not config_file.stat.exists

- name: Set variables from user input
  set_fact:
    vaultwarden_hostname: "{{ vaultwarden_hostname }}"
    vaultwarden_user: "{{ vaultwarden_user }}"
    vaultwarden_password: "{{ vaultwarden_password }}"
  when: not config_file.stat.exists

- name: Save Vaultwarden credentials to config file
  copy:
    dest: "{{ setup_config_file }}"
    content: |
      vaultwarden_hostname: "{{ vaultwarden_hostname }}"
      vaultwarden_user: "{{ vaultwarden_user }}"
  when: not config_file.stat.exists

- name: Login to Bitwarden
  shell: |
    bitwarden login --apikey --email "{{ vaultwarden_user }}" --password "{{ vaultwarden_password }}"
  register: bw_login
  changed_when: false  # Prevent Ansible from marking this as a changed task

- name: Fetch GitHub token from Vaultwarden using Bitwarden CLI
  shell: |
    bitwarden get --name "GitHub Token"
  register: github_token_output
  when: bw_login.rc == 0  # Only run if login was successful

- name: Add GitHub token to GNOME keyring
  shell: |
    secret-tool store --label="GitHub Token" github_token "{{ github_token_output.stdout }}"
  environment:
    VAULTWARDEN_HOSTNAME: "{{ vaultwarden_hostname }}"
    VAULTWARDEN_USER: "{{ vaultwarden_user }}"
    VAULTWARDEN_PASSWORD: "{{ vaultwarden_password }}"
